// Se requiere tener Dokerfile para armar imagen
pipeline {
  agent any

  environment {
    DOCKER_HUB_LOGIN = credentials('docker-hub')
    REGISTRY= "roxross12"
    APPNAME = "py-app"
    VERSION="1.0.0"
    EC2="ec-user@184.0.0.0"

    AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    // AWS_SESSION_TOKEN = credentials('AWS_SESSION_TOKEN')

    BUCKET = 'front.bucket.295devops.io'

    BOT_URL = credentials('BOT_URL')
    TELEGRAM_CHAT_ID = ""
  }

  stages {
    stage('Init') {
      agent {
        docker {
          image 'node:erbium-alpine'
          args '-u root:root'
        }
      }

      steps {
        sh 'npm install'
      }
    }

    stage('Test') {
      agent {
        docker {
          image 'roxross12/node-chrome'
          args '-u root:root'
        }
      }

      steps {
        sh 'npm run test'
      }
    }

    stage('Build') {
      steps {
        sh '''
          docker build -t $REGISTRY/$APPNAME:$VERSION .
        '''
      }
    }

    stage('Push to DockerHub') {
      steps {
        sh '''
          docker login --username=$DOCKER_HUB_LOGIN_USR --password=$DOCKER_HUB_LOGIN_PSW
          docker push $REGISTRY/$APPNAME:$VERSION
        '''
      }
    }

    stage('Deplot to EC2') {
      steps {
        echo '===DEPLOY TO EC2==='
        sh ("sed -i -- 's/REGISTRY/$REGISTRY/g' docker-compose.yml")
        sh ("sed -i -- 's/APPNAME/$APPNAME/g' docker-compose.yml")
        sh ("sed -i -- 's/VERSION/$VERSION/g' docker-compose.yml")

        sshagent(['ssh-aws']) { //nombre de la llave para ssh en jenkins
          sh 'scp -o StrictHostKeyChecking=no docker-compose.yml $EC2:/home/ec2-user'
          // sh 'ssh $EC2 ls -lrt'
          // sh 'ssh $EC2 cat docker-compose.yml'
          sh 'ssh $EC2 docker-compose.yml up -d'
        }
      }
    }

  }

  post {
    success {
      sh "curl -s -X POST $BOT_URL -d chat_id=${TELEGRAM_CHAT_ID} -d parse_mode=markdown -d text='*Full project name*: ${env.JOB_NAME} \n*Branch*: [$GIT_BRANCH]($GIT_URL) \n*Build*: [OK])'"
    }

    failure {
      sh "curl -s -X POST $BOT_URL -d chat_id=${TELEGRAM_CHAT_ID} -d parse_mode=markdown -d text='*Full project name*: ${env.JOB_NAME} \n*Branch*: [$GIT_BRANCH]($GIT_URL) \n*Build*: [NOK])'"
    }
  }
}